# this is a JSON file
# this file is parsed line by line
# all spaces and tabs are removed
# lines starting with a # (regardless of how many spaces or tabs precede) are ignored
{
	# the path of the .csv file to encode
	"path": "table.csv",
	
	# the delimiter for the .csv file
	"delim": ",",
	
	# the number of lines to read from the .csv file
	"count": 100,
	
	# the primary key for every read line
	"id": "Year",
	
	# address size
	# the address size must be divisible by 4 if the translated barcodes are persisted (*1)
	"addrSize": 80,
	
	# payload size
	"payloadSize": 170,
	
	# translation options
	"translation": {
		"persistIds": true,
		# (*1) the address size must be divisible by 4 if "persistBarcodes" is set to true
		"persistBarcodes": true,
		"idsTranslationPath": "ids.store",
		"barcodesTranslationPath": "barcodes.store"
	},
	
	# encoder
	# available coder names: "RotatingTre" is the method from [1]
	# the coders' names "NaiveQuattro", "RotatingQuattro", and "Bin" are supported and are introduced and explained in [2]
	# this is an example for using the fountain code for encoding
	"coder": {
		"name": "fountain code",
	
		# available rules "gc", "hp", "gc window", "microsatellites run 2", "microsatellites run 3", "repeatable region (unstrict)", and "repeatable region (strict)"
		# these error rates can be set higher than intended to increase performance. After encoding using the fountain code, the permutations can efficiently bring the error down
		"packetRules": ["hp"],
		"packetMaxError": 0.7,
		"strandRules": ["gc"],
		"strandMaxError": 0.7
	},
	
	# the LSH settings
	"lsh" : {
		# available type: "bf" resembles an LSH instance storing the hash values in a Bloom filter
		# available type: "ht" resembles an LSH instance storing the hash values along with a set with the same hash values
		# available type: "set" resembles an LSH instance storing the hash values in a set
		"type": "ht",
		
		# the k-mer length for the Jaccard similarity
		"k": 5,
		
		# the number of hash functions
		"r": 5,
		
		# the number of bands (OR-amplification)
		"b": 1,
		
		# the number of bits used by the Bloom filter (if type is set accordingly, otherwise ignored)
		"nBits": 1000,
		
		# the number of hash functions used by the Bloom filter (if type is set accordingly, otherwise ignored)
		"nHashFunctions": 3
	},
	
	"optimizations": {
		"payload": {
			"padding": 0,
			"permutations": 8
		},
		"address": {
			"permutations": 8
		}
	}
}
# [1] Goldman, Nick, et al. "Towards practical, high-capacity, low-maintenance information storage in synthesized DNA." nature 494.7435 (2013): 77-80.
# [2] El-Shaikh, Alex, and Bernhard Seeger. "Content-based filter queries on DNA data storage systems." Scientific Reports 13.1 (2023): 7053.